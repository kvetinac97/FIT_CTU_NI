architecture: standalone
auth:
  enabled: true
  existingSecret: ''
  existingSecretPasswordKey: ''
  password: ''
  sentinel: true
  usePasswordFiles: false
clusterDomain: cluster.local
commonAnnotations: {}
commonConfiguration: |-
  # Enable AOF https://redis.io/topics/persistence#append-only-file
  appendonly yes
  # Disable RDB persistence, AOF persistence already enabled.
  save ""
commonLabels: {}
diagnosticMode:
  args:
    - infinity
  command:
    - sleep
  enabled: false
existingConfigmap: ''
extraDeploy: []
fullnameOverride: ''
global:
  imagePullSecrets: []
  imageRegistry: ''
  redis:
    password: ''
  storageClass: ''
image:
  debug: false
  digest: ''
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/redis
  tag: 7.0.11-debian-11-r7
kubeVersion: ''
master:
  affinity: {}
  args: []
  command: []
  configuration: ''
  containerPorts:
    redis: 6379
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  count: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  disableCommands:
    - FLUSHDB
    - FLUSHALL
  dnsConfig: {}
  dnsPolicy: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  initContainers: []
  kind: StatefulSet
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 20
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  minReadySeconds: 0
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    dataSource: {}
    enabled: true
    existingClaim: ''
    labels: {}
    medium: ''
    path: /data
    selector: {}
    size: 8Gi
    sizeLimit: ''
    storageClass: ''
    subPath: ''
    subPathExpr: ''
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  preExecCmds: []
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 20
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ''
  service:
    annotations: {}
    clusterIP: ''
    externalIPs: []
    externalTrafficPolicy: Cluster
    extraPorts: []
    internalTrafficPolicy: Cluster
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePorts:
      redis: ''
    ports:
      redis: 6379
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ''
  shareProcessNamespace: false
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 20
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
metrics:
  command: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: false
  extraArgs: {}
  extraEnvVars: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis-exporter
    tag: 1.50.0-debian-11-r9
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  podAnnotations:
    prometheus.io/port: '9121'
    prometheus.io/scrape: 'true'
  podLabels: {}
  prometheusRule:
    additionalLabels: {}
    enabled: false
    namespace: ''
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  redisTargetHost: localhost
  resources:
    limits: {}
    requests: {}
  service:
    annotations: {}
    externalTrafficPolicy: Cluster
    extraPorts: []
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    port: 9121
    type: ClusterIP
  serviceMonitor:
    additionalLabels: {}
    enabled: false
    honorLabels: false
    interval: 30s
    metricRelabelings: []
    namespace: ''
    podTargetLabels: []
    relabellings: []
    scrapeTimeout: ''
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
nameOverride: ''
nameResolutionThreshold: 5
nameResolutionTimeout: 5
networkPolicy:
  allowExternal: true
  enabled: false
  extraEgress: []
  extraIngress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
pdb:
  create: false
  maxUnavailable: ''
  minAvailable: 1
podSecurityPolicy:
  create: false
  enabled: false
rbac:
  create: false
  rules: []
replica:
  affinity: {}
  args: []
  autoscaling:
    enabled: false
    maxReplicas: 11
    minReplicas: 1
    targetCPU: ''
    targetMemory: ''
  command: []
  configuration: ''
  containerPorts:
    redis: 6379
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  disableCommands:
    - FLUSHDB
    - FLUSHALL
  dnsConfig: {}
  dnsPolicy: ''
  externalMaster:
    enabled: false
    host: ''
    port: 6379
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 20
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  minReadySeconds: 0
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    dataSource: {}
    enabled: true
    existingClaim: ''
    labels: {}
    medium: ''
    path: /data
    selector: {}
    size: 8Gi
    sizeLimit: ''
    storageClass: ''
    subPath: ''
    subPathExpr: ''
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: ''
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  preExecCmds: []
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 20
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 3
  resources:
    limits: {}
    requests: {}
  schedulerName: ''
  service:
    annotations: {}
    clusterIP: ''
    externalTrafficPolicy: Cluster
    extraPorts: []
    internalTrafficPolicy: Cluster
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePorts:
      redis: ''
    ports:
      redis: 6379
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ''
  shareProcessNamespace: false
  sidecars: []
  startupProbe:
    enabled: true
    failureThreshold: 22
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
secretAnnotations: {}
sentinel:
  annotations: {}
  args: []
  automateClusterRecovery: false
  command: []
  configuration: ''
  containerPorts:
    sentinel: 26379
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  downAfterMilliseconds: 60000
  enabled: false
  externalMaster:
    enabled: false
    host: ''
    port: 6379
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: []
  extraVolumes: []
  failoverTimeout: 180000
  getMasterTimeout: 220
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis-sentinel
    tag: 7.0.11-debian-11-r6
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 20
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  masterSet: mymaster
  parallelSyncs: 1
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    dataSource: {}
    enabled: false
    labels: {}
    medium: ''
    selector: {}
    size: 100Mi
    sizeLimit: ''
    storageClass: ''
  preExecCmds: []
  quorum: 2
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 20
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  redisShutdownWaitFailover: true
  resources:
    limits: {}
    requests: {}
  service:
    annotations: {}
    clusterIP: ''
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePorts:
      redis: ''
      sentinel: ''
    ports:
      redis: 6379
      sentinel: 26379
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  startupProbe:
    enabled: true
    failureThreshold: 22
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: 30
serviceAccount:
  annotations: {}
  automountServiceAccountToken: true
  create: true
  name: ''
serviceBindings:
  enabled: false
sysctl:
  command: []
  enabled: false
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r114
  mountHostSys: false
  resources:
    limits: {}
    requests: {}
tls:
  authClients: true
  autoGenerated: false
  certCAFilename: ''
  certFilename: ''
  certKeyFilename: ''
  certificatesSecret: ''
  dhParamsFilename: ''
  enabled: false
  existingSecret: ''
useExternalDNS:
  additionalAnnotations: {}
  annotationKey: external-dns.alpha.kubernetes.io/
  enabled: false
  suffix: ''
useHostnames: true
volumePermissions:
  containerSecurityContext:
    runAsUser: 0
  enabled: false
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r114
  resources:
    limits: {}
    requests: {}
